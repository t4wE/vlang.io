{% set active_page = 'compare' %} 
{% set page_title = 'The V Comparison' %} 
{% include "./components/head.njk" %}
{% include "./components/nav.njk" %}

<div class="faq">
<h2>Comparison of V and Other Languages</h2>
<p>
I created V because none of the existing languages had all of the following
features:
</p><table>
<tbody><tr><td style="width:300px">%fast_compilation</td><td style="width:200px"> D, Go, Delphi
</td></tr><tr><td>Simplicity &amp; maintainability</td><td>Go
</td></tr><tr><td>Great performance on par with C and <br>zero cost C interop</td><td> C, C++, D, Delphi, Rust
</td></tr><tr><td>Safety (immutability, no null, option types, free from data races)</td><td> Rust
</td></tr><tr><td>Easy concurrency</td><td> Go
</td></tr><tr><td>Easy cross compilation</td><td>Go
</td></tr><tr><td>Compile time code generation</td><td>D
</td></tr><tr><td>Small compiler with zero dependencies</td><td>-
</td></tr><tr><td>No global state</td><td>-
</td></tr><tr><td>Hot code reloading</td><td>-
</td></tr></tbody></table>
<p>
Initially I was going to compare V to all major languages, but it got repetitive pretty quickly.
</p><p>
The table above and the list of the features on the home page should give you a pretty good picture.
</p><p>
For example, it's pretty obvious that compared to C++, V is much much simpler. It offers up to 400 times faster compilation,
safety, lack of undefined behavior, easy concurrency, compile time code generation, etc.
</p><p>
Compared to Python, it's much faster, simpler, safer, more maintainable, etc.
</p><p>
You can use this formula for any language.
</p><p>
Syntax comparison:
</p><p>
<a target="_blank" href="https://github.com/vlang/v/wiki/V-for-Go-developers">V for Go developers</a>
</p><p>
<a target="_blank" href="https://github.com/vlang/v/wiki/V-for-Cpp-developers">V for C++ developers</a>
</p><p>
Since V is very similar to Go, and its domain is similar to Rust's, I left a comparison with these two languages.
<br><br>
</p><h3 id="go">Go</h3>
<p>
V is very similar to Go, and these are the things it improves upon:
</p><p>
- No global state <br>
</p><p>
- No null
</p><p>
- No undefined values
</p><p>
- No <code>err != nil</code> checks (replaced by option types)
</p><p>
- Immutability by default
</p><p>
- Only one declaration style (<code>a := 0</code>)
</p><p>
- Much smaller runtime
</p><p>
- Much smaller binaries (a simple web server written in V is 65 KB vs 7 MB in Go)
</p><p>
- Zero cost C interop
</p><p>
- No GC
</p><p>
- Much faster serialization using codegen and no runtime reflection
</p><p>
- Precompiled HTML templates unlike <code>html/template</code>s that have to be parsed on every request
</p><p>
- Fearless concurrency (no data race guarantee at compilation) <span class="wip">wip</span>
</p><p>
- Enums
</p><p>
- Generics
</p><p>
- String interpolation: <code>println('$foo: $bar.baz')</code>
</p><p>
- Stricter vfmt to ensure one coding style
</p><p>
- Centralised package manager
</p><p>
<br>
</p><h3> Rust</h3>
Rust has a very different philosophy.
<p>
It is a complex language with a growing set of features and a steep learning curve. No doubt, once you learn and understand the language,
it becomes a very powerful tool for developing safe, fast, and stable software. But the complexity is
still there.
</p><p>V's goal is to allow building maintainable and predictable software. That's why the language
is so simple and maybe even boring for some. The good thing is, you can jump into any part of the project
and understand what's going on, feel like it was you who wrote it, because the language is simple and
there's only one way of doing things.
</p><p>
Rust's compilation speed is slow, on par with C++. V compiles 1.2 million lines of code per cpu per second.
</p>
<br>
<h3>V vs Rust vs Go: Example</h3>
<p>
Since V's domain is close to both Go and Rust, I decided to use a simple example to compare the three.
</p><p>
It's a simple program that fetches top Hacker News stories concurrently.
</p><p>
<b>Rust</b>
</p><pre>use serde::Deserialize;
use std::sync::{Arc, Mutex};

const STORIES_URL: &amp;str = "https://hacker-news.firebaseio.com/v0/topstories.json";
const ITEM_URL_BASE: &amp;str = "https://hacker-news.firebaseio.com/v0/item";

#[derive(Deserialize)]
struct Story {
    title: String,
}

fn main() {
    let story_ids: Arc&lt;Vec&lt;u64&gt;&gt; = Arc::new(reqwest::get(STORIES_URL).unwrap().json().unwrap());
    let cursor = Arc::new(Mutex::new(0));
    let mut handles = Vec::new();
    for _ in 0..8 {
        let cursor = cursor.clone();
        let story_ids = story_ids.clone();
        handles.push(std::thread::spawn(move || loop {
            let index = {
                let mut cursor_guard = cursor.lock().unwrap();
                let index = *cursor_guard;
                if index &gt;= story_ids.len() {
                    return;
                }
                *cursor_guard += 1;
                index
            };
            let story_url = format!("{}/{}.json", ITEM_URL_BASE, story_ids[index]);
            let story: Story = reqwest::get(&amp;story_url).unwrap().json().unwrap();
            println!("{}", story.title);
        }));
    }
    for handle in handles {
        handle.join().unwrap();
    }
} 
</pre>
<b>Go</b>
<pre>package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"sync"
)

const STORIES_URL = "https://hacker-news.firebaseio.com/v0/topstories.json" 
const ITEM_URL_BASE = "https://hacker-news.firebaseio.com/v0/item" 

type Story struct {
	Title string
}

func main() {
	rsp, err := http.Get(STORIES_URL) 
	if err != nil {
		panic(err)
	}
	defer rsp.Body.Close()
	data, err := ioutil.ReadAll(rsp.Body)
	if err != nil {
		panic(err)
	}
	var ids []int
	if err := json.Unmarshal(data, &amp;ids); err != nil {
		panic(err)
	}
	var cursor int
	var mutex sync.Mutex
	next := func() int {
		mutex.Lock()
		defer mutex.Unlock()
		temp := cursor
		cursor++
		return temp
	}
	wg := sync.WaitGroup{}
	for i := 0; i &lt; 8; i++ {
		wg.Add(1)
		go func() {
			for cursor := next(); cursor &lt; len(ids); cursor = next() {
				url := fmt.Sprintf(
					"%s/%d.json",
                                         ITEM_URL_BASE, 
					ids[cursor],
				)
				rsp, err := http.Get(url)
				if err != nil {
					panic(err)
				}
				defer rsp.Body.Close()

				data, err := ioutil.ReadAll(rsp.Body)
				if err != nil {
					panic(err)
				}
				var story Story
				if err := json.Unmarshal(data, &amp;story); err != nil {
					panic(err)
				}
				fmt.Println(story.Title)
			}
			wg.Done()
		}()
	}
	wg.Wait()
}
</pre>
<b>V</b> <br>
<pre>const (
	StoriesUrl = 'https://hacker-news.firebaseio.com/v0/topstories.json'
	ItemUrlBase = 'https://hacker-news.firebaseio.com/v0/item'
)

struct Story {
    title string
}

fn main() {
    resp := http.get(StoriesUrl)? 
    ids := json.decode([]int, resp.body)? 
    mut cursor := 0
    for _ in 0..8 {
        go fn() {
            for {
                lock { 
                    if cursor &gt;= ids.len {
                        break
                    }
                    id := ids[cursor]
                    cursor++
                }
                resp := http.get('$ItemUrlBase/$id.json')? 
                story := json.decode(Story, resp.body)?
                println(story.title)
            }
        }()
    }
    runtime.wait() 
}  
</pre>
</div>

{% include "./components/foot.njk" %}
